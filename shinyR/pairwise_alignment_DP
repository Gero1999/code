# Import libraries
library(shiny)
library(shinythemes)
library(RCurl)

# Define UI for application that draws a histogram
ui <- fluidPage(theme=shinytheme('yeti'),

    # Application title
    titlePanel("Pairwise alignment with dynamic programming"),
    headerPanel('Pairwise alignment'),

    # Input data elements: Protein sequences to compare, substitution matrix and gap penalty 
    sidebarLayout(
        sidebarPanel(
            HTML('<h3>Input parameters</h3>'),
            textInput("seq1", "Sequence 1:", ""),
            textInput("seq2", "Sequence 2:", ""),
            selectInput("sub_mtx_name", "Substitution matrix (scoring)",
                        choices = list("BLOSUM45"='BLOSUM45', 'BLOSUM62'='BLOSUM62', 'BLOSUM80'='BLOSUM80'),
                        selected = 'BLOSUM62'),
            sliderInput("gap_penalty",
                        "Gap penalty:",
                        min = -10,
                        max = 0,
                        value = -1),
            actionButton('submitbutton', 'Submit', class='btn btn-primary')
        ),

        # Show a pair matrix of the global alignment and the aligned sequences
        mainPanel(
            tags$label(h3('Pair matrix of the global alignemnt \n')),
            uiOutput('mtx'),
            tags$label(h3('Alignment')),
            uiOutput('alig_seq1'),
            uiOutput("alig_seq2"),
        )
    )
)

# Define server logic required to perform the alignment (dynamic programming)
server <- function(input, output) {

    numericInput <- reactive({
        seq1 = unlist(strsplit(input$seq1, '')); seq2 = unlist(strsplit(input$seq2, ''))
        seq1 = c('NULL', seq1); seq2 = c('NULL', seq2)
        gap_penalty = input$gap_penalty
        sub_mtx = read.table(text=getURL(paste0('https://raw.githubusercontent.com/Gero1999/data/main/sub_matrices/', input$sub_mtx_name)), header=TRUE)
        
        mtx = matrix(0, nrow=length(seq1), ncol=length(seq2))
        rownames(mtx)=seq1; colnames(mtx)=seq2
        
        for (row in 2:nrow(mtx)){
            mtx[row,1] = mtx[row-1,1] + gap_penalty}
        for (col in 2:ncol(mtx)){
            mtx[1,col] = mtx[1,col-1] + gap_penalty}
        
        for (row in 2:nrow(mtx)){
            print(paste0('Row: ', row))
            for (col in 2:ncol(mtx)){
                match_score = sub_mtx[rownames(mtx)[row],colnames(mtx)[col]]
                print(paste0('Col: ', col, ' Row: ', row, rownames(mtx)[row], '-', colnames(mtx)[col]))
                possible_paths = c(mtx[row-1,col-1]+match_score,
                                   mtx[row-1,col]+gap_penalty,
                                   mtx[row,col-1]+gap_penalty)
                mtx[row,col] = max(possible_paths)
            }
        }
        # Do the traceback starting in the rigth-bottom cell (global alignment)
        row = length(seq1); col = length(seq2)
        alig_seq1 = ''; alig_seq2 = ''
        
        # It iterates over the different potential cells, displaying one global optimum alignment
        while (row!=1 || col!=1){
            cell = mtx[row,col]
            match_score = sub_mtx[rownames(mtx)[row],colnames(mtx)[col]]
            
            if (cell-match_score==mtx[row-1,col-1] && !is.null(match_score)){
                alig_seq1 = paste0(rownames(mtx)[row], alig_seq1)
                alig_seq2 = paste0(rownames(mtx)[row], alig_seq2) 
                row = row-1; col = col-1
            } else if (cell-gap_penalty==mtx[row-1,col]){
                alig_seq1 = paste0(rownames(mtx)[row], alig_seq1)
                alig_seq2 = paste0('_', alig_seq2)
                row = row-1
            } else if (cell-gap_penalty==mtx[row,col-1]){
                alig_seq1 = paste0('_', alig_seq1)
                alig_seq2 = paste0(rownames(mtx)[row], alig_seq2)
                col = col-1
            }
        }
        
        # Object with all the outputs planned to be returned
        list(mtx, alig_seq1, alig_seq2)
    })
    
    # Define all the outputs specified previously in the UI and built during the server function
    output$mtx <- renderTable({
        if (input$submitbutton>0){
            isolate(numericInput()[[1]])
            }
        }, rownames=TRUE)
    output$alig_seq1 <- renderText({
        if (input$submitbutton>0){
            isolate(numericInput()[[2]])
        }
        })
    output$alig_seq2 <- renderText({
        if (input$submitbutton>0){
            isolate(numericInput()[[3]])
        }
    })

}

# Run the application 
shinyApp(ui = ui, server = server)

